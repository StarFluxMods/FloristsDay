using System.Collections.Generic;
using CustomSettingsAndLayouts;
using Kitchen.Layouts;
using Kitchen.Layouts.Modules;
using KitchenData;
using KitchenLib.Customs;
using KitchenLib.References;
using KitchenLib.Utils;
using ParentsEvent.Customs.RestaurantSettings;
using ParentsEvent.Utilities;
using UnityEngine;

namespace ParentsEvent.Customs.LayoutProfiles
{
    public class FloristsLayout : CustomLayoutProfile
    {
        public override string UniqueNameID => "FloristsLayout";
        public override LayoutGraph Graph => GenerateLayout(UniqueNameID);
        public override int MaximumTables => 3;
        public override List<GameDataObject> RequiredAppliances => ((LayoutProfile)GDOUtils.GetExistingGDO(LayoutProfileReferences.DinerLayout)).RequiredAppliances;
        public override GameDataObject Table => ((LayoutProfile)GDOUtils.GetExistingGDO(LayoutProfileReferences.DinerLayout)).Table;
        public override GameDataObject Counter => ((LayoutProfile)GDOUtils.GetExistingGDO(LayoutProfileReferences.DinerLayout)).Counter;
        public override Appliance ExternalBin => ((LayoutProfile)GDOUtils.GetExistingGDO(LayoutProfileReferences.DinerLayout)).ExternalBin;

// This script was generated by Layout Builder
public static LayoutGraph GenerateLayout(string graphName)
{
    
    // Creating the graph
    
    LayoutGraph graph = ScriptableObject.CreateInstance<LayoutGraph>();
    
    // Creating all the nodes
    
    RecentreLayout RecentreLayout0 = ScriptableObject.CreateInstance<RecentreLayout>();
    CreateFrontDoor CreateFrontDoor0 = ScriptableObject.CreateInstance<CreateFrontDoor>();
    AppendFeatures AppendFeatures0 = ScriptableObject.CreateInstance<AppendFeatures>();
    SplitRooms SplitRooms0 = ScriptableObject.CreateInstance<SplitRooms>();
    MergeRoomsByType MergeRoomsByType0 = ScriptableObject.CreateInstance<MergeRoomsByType>();
    NewFromTexture NewFromTexture0 = ScriptableObject.CreateInstance<NewFromTexture>();
    Output Output0 = ScriptableObject.CreateInstance<Output>();
    MergeRoomsByType MergeRoomsByType1 = ScriptableObject.CreateInstance<MergeRoomsByType>();
    SwitchFeatures SwitchFeatures0 = ScriptableObject.CreateInstance<SwitchFeatures>();
    FilterByFreeSpace FilterByFreeSpace0 = ScriptableObject.CreateInstance<FilterByFreeSpace>();
    FilterByRoom FilterByRoom0 = ScriptableObject.CreateInstance<FilterByRoom>();
    FilterOnePerPair FilterOnePerPair0 = ScriptableObject.CreateInstance<FilterOnePerPair>();
    FilterByFreeSpace FilterByFreeSpace1 = ScriptableObject.CreateInstance<FilterByFreeSpace>();
    FilterByRoom FilterByRoom1 = ScriptableObject.CreateInstance<FilterByRoom>();
    FilterOnePerPair FilterOnePerPair1 = ScriptableObject.CreateInstance<FilterOnePerPair>();
    FilterByFreeSpace FilterByFreeSpace2 = ScriptableObject.CreateInstance<FilterByFreeSpace>();
    FilterByRoom FilterByRoom2 = ScriptableObject.CreateInstance<FilterByRoom>();
    FindAllFeatures FindAllFeatures0 = ScriptableObject.CreateInstance<FindAllFeatures>();
    
    // Setting all the values
    
    RecentreLayout0.FixSeed = 0;
    RecentreLayout0.position = new Vector2(598f, -112);
    CreateFrontDoor0.Type = RoomType.Dining;
    CreateFrontDoor0.ForceFirstHalf = false;
    CreateFrontDoor0.FixSeed = 0;
    CreateFrontDoor0.position = new Vector2(773f, -112);
    AppendFeatures0.FixSeed = 0;
    AppendFeatures0.position = new Vector2(1486f, -112);
    SplitRooms0.UniformX = 0;
    SplitRooms0.UniformY = 0;
    SplitRooms0.RandomX = 1;
    SplitRooms0.RandomY = 1;
    SplitRooms0.FixSeed = 0;
    SplitRooms0.position = new Vector2(423f, -112);
    MergeRoomsByType0.FixSeed = 0;
    MergeRoomsByType0.position = new Vector2(248f, -112);
    NewFromTexture0.SourceTexture = ResourceUtils.LoadTextureFromBase64("iVBORw0KGgoAAAANSUhEUgAAABAAAAANCAYAAACgu+4kAAAAOUlEQVQoFWNk+A+EFAAmCvSCtQ4DAxgZGP6jBuJ/oBA+wPgGRZbiMGBBMQ7IIegANA0Uu2DUAAYGAOEDBwVI7qPDAAAAAElFTkSuQmCC");
    NewFromTexture0.Map = new List<NewFromTexture.ColorRoom>();
    NewFromTexture.ColorRoom NewFromTexture0_colorRoom0 = new NewFromTexture.ColorRoom();
    NewFromTexture0_colorRoom0.Color = new Color(0f, 0f, 1f, 1f);
    NewFromTexture0_colorRoom0.Room = new Room(-821840148, RoomType.Kitchen);
    NewFromTexture0.Map.Add(NewFromTexture0_colorRoom0);
    NewFromTexture.ColorRoom NewFromTexture0_colorRoom1 = new NewFromTexture.ColorRoom();
    NewFromTexture0_colorRoom1.Color = new Color(0f, 1f, 0f, 1f);
    NewFromTexture0_colorRoom1.Room = new Room(997550736, RoomType.Garden);
    NewFromTexture0.Map.Add(NewFromTexture0_colorRoom1);
    NewFromTexture.ColorRoom NewFromTexture0_colorRoom2 = new NewFromTexture.ColorRoom();
    NewFromTexture0_colorRoom2.Color = new Color(1f, 0f, 0f, 1f);
    NewFromTexture0_colorRoom2.Room = new Room(-1658358837, RoomType.Dining);
    NewFromTexture0.Map.Add(NewFromTexture0_colorRoom2);
    NewFromTexture.ColorRoom NewFromTexture0_colorRoom3 = new NewFromTexture.ColorRoom();
    NewFromTexture0_colorRoom3.Color = new Color(0f, 0f, 0.9254903f, 1f);
    NewFromTexture0_colorRoom3.Room = new Room(-519246323, RoomType.Kitchen);
    NewFromTexture0.Map.Add(NewFromTexture0_colorRoom3);
    NewFromTexture0.FixSeed = 0;
    NewFromTexture0.position = new Vector2(-364f, -112);
    Output0.FixSeed = 0;
    Output0.position = new Vector2(1836f, -112);
    MergeRoomsByType1.FixSeed = 0;
    MergeRoomsByType1.position = new Vector2(1661f, -112);
    SwitchFeatures0.SetToFeature = FeatureType.Hatch;
    SwitchFeatures0.FixSeed = 0;
    SwitchFeatures0.position = new Vector2(1298f, 525);
    FilterByFreeSpace0.FixSeed = 0;
    FilterByFreeSpace0.position = new Vector2(1123f, 525);
    FilterByRoom0.RemoveMode = false;
    FilterByRoom0.Type1 = RoomType.Dining;
    FilterByRoom0.FilterSecond = true;
    FilterByRoom0.Type2 = RoomType.Kitchen;
    FilterByRoom0.FixSeed = 0;
    FilterByRoom0.position = new Vector2(948f, 525);
    FilterOnePerPair0.FixSeed = 0;
    FilterOnePerPair0.position = new Vector2(1298f, 288);
    FilterByFreeSpace1.FixSeed = 0;
    FilterByFreeSpace1.position = new Vector2(1123f, 288);
    FilterByRoom1.RemoveMode = false;
    FilterByRoom1.Type1 = RoomType.Dining;
    FilterByRoom1.FilterSecond = true;
    FilterByRoom1.Type2 = RoomType.Garden;
    FilterByRoom1.FixSeed = 0;
    FilterByRoom1.position = new Vector2(948f, 288);
    FilterOnePerPair1.FixSeed = 0;
    FilterOnePerPair1.position = new Vector2(1298f, 50);
    FilterByFreeSpace2.FixSeed = 0;
    FilterByFreeSpace2.position = new Vector2(1123f, 50);
    FilterByRoom2.RemoveMode = false;
    FilterByRoom2.Type1 = RoomType.Dining;
    FilterByRoom2.FilterSecond = true;
    FilterByRoom2.Type2 = RoomType.Kitchen;
    FilterByRoom2.FixSeed = 0;
    FilterByRoom2.position = new Vector2(948f, 50);
    FindAllFeatures0.Feature = FeatureType.Door;
    FindAllFeatures0.FixSeed = 0;
    FindAllFeatures0.position = new Vector2(773f, 50);
    
    // Connecting all the nodes
    
    RecentreLayout0.GetPort("Input").Connect(SplitRooms0.GetPort("Output"));
    CreateFrontDoor0.GetPort("Input").Connect(RecentreLayout0.GetPort("Output"));
    AppendFeatures0.GetPort("AppendFrom").Connect(FilterOnePerPair1.GetPort("Output"));
    AppendFeatures0.GetPort("AppendFrom").Connect(FilterOnePerPair0.GetPort("Output"));
    AppendFeatures0.GetPort("AppendFrom").Connect(SwitchFeatures0.GetPort("Output"));
    AppendFeatures0.GetPort("Input").Connect(CreateFrontDoor0.GetPort("Output"));
    SplitRooms0.GetPort("Input").Connect(MergeRoomsByType0.GetPort("Output"));
    MergeRoomsByType0.GetPort("Input").Connect(NewFromTexture0.GetPort("Output"));
    Output0.GetPort("Input").Connect(MergeRoomsByType1.GetPort("Output"));
    MergeRoomsByType1.GetPort("Input").Connect(AppendFeatures0.GetPort("Output"));
    SwitchFeatures0.GetPort("Input").Connect(FilterByFreeSpace0.GetPort("Output"));
    FilterByFreeSpace0.GetPort("Input").Connect(FilterByRoom0.GetPort("Output"));
    FilterByRoom0.GetPort("Input").Connect(FindAllFeatures0.GetPort("Output"));
    FilterOnePerPair0.GetPort("Input").Connect(FilterByFreeSpace1.GetPort("Output"));
    FilterByFreeSpace1.GetPort("Input").Connect(FilterByRoom1.GetPort("Output"));
    FilterByRoom1.GetPort("Input").Connect(FindAllFeatures0.GetPort("Output"));
    FilterOnePerPair1.GetPort("Input").Connect(FilterByFreeSpace2.GetPort("Output"));
    FilterByFreeSpace2.GetPort("Input").Connect(FilterByRoom2.GetPort("Output"));
    FilterByRoom2.GetPort("Input").Connect(FindAllFeatures0.GetPort("Output"));
    FindAllFeatures0.GetPort("Input").Connect(RecentreLayout0.GetPort("Output"));
    
    // Adding all the nodes to the graph and setting the graph
    
    graph.nodes.Add(RecentreLayout0);
    RecentreLayout0.graph = graph;
    graph.nodes.Add(CreateFrontDoor0);
    CreateFrontDoor0.graph = graph;
    graph.nodes.Add(AppendFeatures0);
    AppendFeatures0.graph = graph;
    graph.nodes.Add(SplitRooms0);
    SplitRooms0.graph = graph;
    graph.nodes.Add(MergeRoomsByType0);
    MergeRoomsByType0.graph = graph;
    graph.nodes.Add(NewFromTexture0);
    NewFromTexture0.graph = graph;
    graph.nodes.Add(Output0);
    Output0.graph = graph;
    graph.nodes.Add(MergeRoomsByType1);
    MergeRoomsByType1.graph = graph;
    graph.nodes.Add(SwitchFeatures0);
    SwitchFeatures0.graph = graph;
    graph.nodes.Add(FilterByFreeSpace0);
    FilterByFreeSpace0.graph = graph;
    graph.nodes.Add(FilterByRoom0);
    FilterByRoom0.graph = graph;
    graph.nodes.Add(FilterOnePerPair0);
    FilterOnePerPair0.graph = graph;
    graph.nodes.Add(FilterByFreeSpace1);
    FilterByFreeSpace1.graph = graph;
    graph.nodes.Add(FilterByRoom1);
    FilterByRoom1.graph = graph;
    graph.nodes.Add(FilterOnePerPair1);
    FilterOnePerPair1.graph = graph;
    graph.nodes.Add(FilterByFreeSpace2);
    FilterByFreeSpace2.graph = graph;
    graph.nodes.Add(FilterByRoom2);
    FilterByRoom2.graph = graph;
    graph.nodes.Add(FindAllFeatures0);
    FindAllFeatures0.graph = graph;
    graph.name = graphName;
    
    return graph;
}

        
        public override void OnRegister(LayoutProfile gameDataObject)
        {
            base.OnRegister(gameDataObject);
            Registry.AddSettingLayout(GDOReferences.FloristsSetting, gameDataObject);
        }
    }
}